{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stanleyjia/Documents/Eudaimonia/Eudaimonia (dashboard)/app/src/Components/WebByMood/WebByMoodGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { getMoodData } from '../../Data/WebsiteByMood.js';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'; // I only imported the elements of recharts that I needed, there are a lot more you can use\n\nfunction WebByMoodGraph() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [data1, setData1] = useState([]);\n  const [title1, setTitle1] = useState();\n  const [data2, setData2] = useState([]);\n  const [title2, setTitle2] = useState();\n  useEffect(() => {\n    // Function to create buttons for each mood.\n    // It works but it might be better to just have it hard coded\n    // since it never changes\n    function CreateButtons() {\n      const allMoods = ['Anxious', 'Confident', 'Sad', 'Happy', 'Tired', 'Energized', 'Frustrated', 'Calm', 'Connected', 'Distracted', 'Focused'];\n      let buttonSet1 = document.getElementById('buttonSet1');\n\n      for (var i = 0; i < allMoods.length; i++) {\n        let newButton = document.createElement('button');\n        newButton.innerHTML = allMoods[i];\n        buttonSet1.appendChild(newButton);\n        newButton.addEventListener('click', setMoodData);\n        newButton.className = allMoods[i];\n      }\n    } // This function is where WebsiteByMood.js is called to collect the data\n    // we need for the graphs.\n    // I initially get Anxious and Focused just to have two graphs up to start.\n    // It is an async/await function so that it waits until\n\n\n    async function getData() {\n      const anxious = await getMoodData('Anxious'); // const focused = await getMoodData1('Focused');\n\n      setData1(anxious);\n      setTitle1('Anxious');\n      CreateButtons();\n      setLoading(false);\n    }\n\n    if (loading) {\n      getData();\n    }\n  }, []); // The empty array at the end of UseEffect makes it only run once\n  // per render and only rerenders on state change.\n\n  const setMoodData = async e => {\n    const mood = e.target.className;\n    const a = await getMoodData(mood);\n    setData1(a);\n    setTitle1(mood);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"buttonSet1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Mood: \", title1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n      width: 1000,\n      height: 500,\n      data: data1,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"seconds\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"buttonSet2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Mood: \", title2]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n      width: 1000,\n      height: 500,\n      data: data2,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"seconds\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WebByMoodGraph, \"WvtucMO59o4Fpqji20k5U6F4Qas=\");\n\n_c = WebByMoodGraph;\nexport default WebByMoodGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"WebByMoodGraph\");","map":{"version":3,"sources":["/Users/stanleyjia/Documents/Eudaimonia/Eudaimonia (dashboard)/app/src/Components/WebByMood/WebByMoodGraph.js"],"names":["React","useState","useEffect","getMoodData","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","WebByMoodGraph","loading","setLoading","data1","setData1","title1","setTitle1","data2","setData2","title2","setTitle2","CreateButtons","allMoods","buttonSet1","document","getElementById","i","length","newButton","createElement","innerHTML","appendChild","addEventListener","setMoodData","className","getData","anxious","e","mood","target","a","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getMoodData } from '../../Data/WebsiteByMood.js';\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n// I only imported the elements of recharts that I needed, there are a lot more you can use\n\nfunction WebByMoodGraph() {\n\n  const [loading, setLoading] = useState(true)\n  const [data1, setData1] = useState([])\n  const [title1, setTitle1] = useState()\n  const [data2, setData2] = useState([])\n  const [title2, setTitle2] = useState()\n\n  useEffect(() => {\n    // Function to create buttons for each mood.\n    // It works but it might be better to just have it hard coded\n    // since it never changes\n    function CreateButtons() {\n      const allMoods = [\n        'Anxious', 'Confident', 'Sad', 'Happy', 'Tired',\n        'Energized', 'Frustrated', 'Calm', 'Connected',\n        'Distracted', 'Focused'\n      ]\n      let buttonSet1 = document.getElementById('buttonSet1');\n      for (var i = 0; i < allMoods.length; i++) {\n        let newButton = document.createElement('button');\n        newButton.innerHTML = allMoods[i];\n        buttonSet1.appendChild(newButton);\n        newButton.addEventListener('click', setMoodData);\n        newButton.className = allMoods[i];\n      }\n\n    }\n    // This function is where WebsiteByMood.js is called to collect the data\n    // we need for the graphs.\n    // I initially get Anxious and Focused just to have two graphs up to start.\n    // It is an async/await function so that it waits until\n    async function getData() {\n      const anxious = await getMoodData('Anxious');\n      // const focused = await getMoodData1('Focused');\n      setData1(anxious);\n      setTitle1('Anxious');\n      CreateButtons();\n\n      setLoading(false);\n    }\n    if (loading) {\n      getData();\n    }\n  }, []);\n  // The empty array at the end of UseEffect makes it only run once\n  // per render and only rerenders on state change.\n\n  const setMoodData = async (e) => {\n    const mood = e.target.className;\n    const a = await getMoodData(mood);\n    setData1(a);\n    setTitle1(mood);\n  };\n  return (\n    <div>\n      <div id='buttonSet1'>\n      </div>\n      <h3>\n        Mood: {title1}\n      </h3>\n      <BarChart width={1000} height={500} data={data1} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"seconds\" fill=\"#8884d8\" />\n      </BarChart>\n      <br />\n      <div id='buttonSet2'>\n      </div>\n      <h3>\n        Mood: {title2}\n      </h3>\n      <BarChart width={1000} height={500} data={data2} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"seconds\" fill=\"#8884d8\" />\n      </BarChart>\n    </div>\n  )\n}\nexport default WebByMoodGraph;"]},"metadata":{},"sourceType":"module"}