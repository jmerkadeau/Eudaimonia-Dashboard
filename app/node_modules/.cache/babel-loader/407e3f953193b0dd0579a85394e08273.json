{"ast":null,"code":"import React, { Component } from 'react';\nimport getMoodLog from './MoodData.js';\nimport { webLog } from './WebData.js'; // async function getMood(){\n//     const moodLog = await getMoodLog().then(result => result.data);\n//     return moodLog;\n// }\n\nconst hourBeforeArray = time => {\n  var hba = [];\n\n  for (var i = 0; i < webLog.length; i++) {\n    var start = webLog[i].start;\n    var end = webLog[i].end; //console.log(start);\n\n    if (start > time - 3600 && start < time) {\n      console.log('found');\n      var timeDiff = end - start;\n      const a = {\n        'domain': webLog[i].domain,\n        'timeDiff': timeDiff\n      };\n      hba.push(a);\n      console.log(a);\n    }\n  }\n\n  return hba;\n};\n\nfunction compare(a, b) {\n  const timeA = a.time;\n  const timeB = b.time;\n  let comparison = 0;\n\n  if (timeA > timeB) {\n    comparison = -1;\n  } else if (timeA < timeB) {\n    comparison = 1;\n  }\n\n  return comparison;\n}\n\nconst anxious = async () => {\n  const moodLog = await getMoodLog();\n}; // getMoodLog().then(\n//   function (moodLog) {\n//     console.log(moodLog);\n//     console.log(Object.keys(moodLog));\n//   }\n// );\n//console.log(webLog)\n\n\nfunction process(moodLog) {\n  var timeByDomain = [];\n  console.log(moodLog); // console.log(moodLog.keys);\n\n  console.log(\"here\");\n  console.log(Object.keys(moodLog));\n}\n\n; // console.log(typeof (moodLog));\n//starting here\n// Object.keys(moodLog).forEach(function(key){\n//     console.log(key.moodLog[key]);\n// });\n// for (let [key, value] of Object.entries(moodLog)) {\n//   console.log(`${key}:${value}`);\n// }\n// for (var key in moodLog){\n//     console.log(key);\n// }\n//     console.log(moodLog[i]);\n//     if (moodLog[i].mood === 'Anxious'){\n//         var time = moodLog[i].time;\n//         // add conditional loop for if time < 3600\n//         // x is the array of the web times for the hour leading up to the mood log\n//         const x  = hourBeforeArray(time)\n//         console.log(x);\n//         const distinctDomains = [...new Set(x.map(x => x.domain))];\n//         console.log(distinctDomains);\n//         for (var j = 0; j < distinctDomains.length; j++){\n//             var domTime = 0;\n//             for (var k = 0; k < x.length; k++){\n//                 if (x[k].domain === distinctDomains[j]){\n//                     console.log('works!!!')\n//                     domTime += x[k].timeDiff;\n//                 }\n//             }\n//             const domainTime = {\n//                 'domain' : distinctDomains[j],\n//                 'time' : domTime\n//             }\n//             timeByDomain.push(domainTime);\n//         }\n//     }\n// }\n// const topFive = timeByDomain.sort(compare);\n// console.log(timeByDomain);\n// const anxiousData = [\n//     {name: topFive[0].domain, seconds: topFive[0].time},\n//     {name: topFive[1].domain, seconds: topFive[1].time},\n//     {name: topFive[2].domain, seconds: topFive[2].time},\n//     {name: topFive[3].domain, seconds: topFive[3].time},\n//     {name: topFive[4].domain, seconds: topFive[4].time},\n// ]\n//return(anxiousData);\n// return ([]);\n//ending here\n// const anxiousData = [\n//     {name: timeByDomain[0].domain, seconds: timeByDomain[0].time},\n//     {name: timeByDomain[1].domain, seconds: timeByDomain[1].time},\n//     {name: timeByDomain[2].domain, seconds: timeByDomain[2].time},\n//     {name: timeByDomain[3].domain, seconds: timeByDomain[3].time},\n//     {name: timeByDomain[4].domain, seconds: timeByDomain[4].time},\n// ]\n// }\n// export default tim;\n// // console.log(timeByDomain);\n\nexport const timeByDom = anxious();","map":{"version":3,"sources":["/Users/stanleyjia/Documents/Eudaimonia/firebase-auth/auth-app/src/Components/WebsiteByMood.js"],"names":["React","Component","getMoodLog","webLog","hourBeforeArray","time","hba","i","length","start","end","console","log","timeDiff","a","domain","push","compare","b","timeA","timeB","comparison","anxious","moodLog","process","timeByDomain","Object","keys","timeByDom"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,SAASC,MAAT,QAAuB,cAAvB,C,CAEA;AACA;AACA;AACA;;AAIA,MAAMC,eAAe,GAAIC,IAAD,IAAU;AAChC,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAIE,KAAK,GAAGN,MAAM,CAACI,CAAD,CAAN,CAAUE,KAAtB;AACA,QAAIC,GAAG,GAAGP,MAAM,CAACI,CAAD,CAAN,CAAUG,GAApB,CAFsC,CAGtC;;AACA,QAAID,KAAK,GAAIJ,IAAI,GAAG,IAAhB,IAAyBI,KAAK,GAAGJ,IAArC,EAA2C;AACzCM,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,UAAIC,QAAQ,GAAGH,GAAG,GAAGD,KAArB;AACA,YAAMK,CAAC,GAAG;AACR,kBAAUX,MAAM,CAACI,CAAD,CAAN,CAAUQ,MADZ;AAER,oBAAYF;AAFJ,OAAV;AAIAP,MAAAA,GAAG,CAACU,IAAJ,CAASF,CAAT;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACD;AACF;;AACD,SAAQR,GAAR;AACD,CAlBD;;AAmBA,SAASW,OAAT,CAAiBH,CAAjB,EAAoBI,CAApB,EAAuB;AACrB,QAAMC,KAAK,GAAGL,CAAC,CAACT,IAAhB;AACA,QAAMe,KAAK,GAAGF,CAAC,CAACb,IAAhB;AAEA,MAAIgB,UAAU,GAAG,CAAjB;;AACA,MAAIF,KAAK,GAAGC,KAAZ,EAAmB;AACjBC,IAAAA,UAAU,GAAG,CAAC,CAAd;AACD,GAFD,MAGK,IAAIF,KAAK,GAAGC,KAAZ,EAAmB;AACtBC,IAAAA,UAAU,GAAG,CAAb;AACD;;AACD,SAAOA,UAAP;AACD;;AAED,MAAMC,OAAO,GAAG,YAAY;AAC1B,QAAMC,OAAO,GAAG,MAAMrB,UAAU,EAAhC;AACD,CAFD,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsB,OAAT,CAAiBD,OAAjB,EAA0B;AACxB,MAAIE,YAAY,GAAG,EAAnB;AACAd,EAAAA,OAAO,CAACC,GAAR,CAAYW,OAAZ,EAFwB,CAGxB;;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYc,MAAM,CAACC,IAAP,CAAYJ,OAAZ,CAAZ;AACD;;AAAA,C,CACD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMK,SAAS,GAAGN,OAAO,EAAzB","sourcesContent":["import React, { Component } from 'react';\nimport getMoodLog from './MoodData.js';\nimport { webLog } from './WebData.js';\n\n// async function getMood(){\n//     const moodLog = await getMoodLog().then(result => result.data);\n//     return moodLog;\n// }\n\n\n\nconst hourBeforeArray = (time) => {\n  var hba = [];\n  for (var i = 0; i < webLog.length; i++) {\n    var start = webLog[i].start;\n    var end = webLog[i].end;\n    //console.log(start);\n    if (start > (time - 3600) && start < time) {\n      console.log('found')\n      var timeDiff = end - start;\n      const a = {\n        'domain': webLog[i].domain,\n        'timeDiff': timeDiff\n      }\n      hba.push(a);\n      console.log(a);\n    }\n  }\n  return (hba);\n}\nfunction compare(a, b) {\n  const timeA = a.time;\n  const timeB = b.time;\n\n  let comparison = 0;\n  if (timeA > timeB) {\n    comparison = -1;\n  }\n  else if (timeA < timeB) {\n    comparison = 1;\n  }\n  return comparison;\n}\n\nconst anxious = async () => {\n  const moodLog = await getMoodLog();\n}\n// getMoodLog().then(\n//   function (moodLog) {\n//     console.log(moodLog);\n//     console.log(Object.keys(moodLog));\n//   }\n// );\n//console.log(webLog)\nfunction process(moodLog) {\n  var timeByDomain = [];\n  console.log(moodLog);\n  // console.log(moodLog.keys);\n  console.log(\"here\");\n  console.log(Object.keys(moodLog));\n};\n// console.log(typeof (moodLog));\n//starting here\n\n// Object.keys(moodLog).forEach(function(key){\n//     console.log(key.moodLog[key]);\n// });\n// for (let [key, value] of Object.entries(moodLog)) {\n//   console.log(`${key}:${value}`);\n// }\n// for (var key in moodLog){\n//     console.log(key);\n// }\n//     console.log(moodLog[i]);\n//     if (moodLog[i].mood === 'Anxious'){\n//         var time = moodLog[i].time;\n//         // add conditional loop for if time < 3600\n//         // x is the array of the web times for the hour leading up to the mood log\n//         const x  = hourBeforeArray(time)\n//         console.log(x);\n//         const distinctDomains = [...new Set(x.map(x => x.domain))];\n//         console.log(distinctDomains);\n//         for (var j = 0; j < distinctDomains.length; j++){\n//             var domTime = 0;\n//             for (var k = 0; k < x.length; k++){\n//                 if (x[k].domain === distinctDomains[j]){\n//                     console.log('works!!!')\n//                     domTime += x[k].timeDiff;\n//                 }\n//             }\n//             const domainTime = {\n//                 'domain' : distinctDomains[j],\n//                 'time' : domTime\n//             }\n//             timeByDomain.push(domainTime);\n//         }\n//     }\n// }\n// const topFive = timeByDomain.sort(compare);\n// console.log(timeByDomain);\n// const anxiousData = [\n//     {name: topFive[0].domain, seconds: topFive[0].time},\n//     {name: topFive[1].domain, seconds: topFive[1].time},\n//     {name: topFive[2].domain, seconds: topFive[2].time},\n//     {name: topFive[3].domain, seconds: topFive[3].time},\n//     {name: topFive[4].domain, seconds: topFive[4].time},\n// ]\n//return(anxiousData);\n// return ([]);\n\n\n\n//ending here\n// const anxiousData = [\n//     {name: timeByDomain[0].domain, seconds: timeByDomain[0].time},\n//     {name: timeByDomain[1].domain, seconds: timeByDomain[1].time},\n//     {name: timeByDomain[2].domain, seconds: timeByDomain[2].time},\n//     {name: timeByDomain[3].domain, seconds: timeByDomain[3].time},\n//     {name: timeByDomain[4].domain, seconds: timeByDomain[4].time},\n// ]\n// }\n// export default tim;\n\n// // console.log(timeByDomain);\nexport const timeByDom = anxious();"]},"metadata":{},"sourceType":"module"}