{"ast":null,"code":"import React, { Component } from 'react';\nimport getMoodLog from './MoodData.js';\nimport getWebLog from './WebData.js'; // hourBeforeArray creates an array with all of\n// the logged web visirs that a start time within one\n// hour before the time of the specified mood log\n\nconst hourBeforeArray = (time, webLog) => {\n  var hba = [];\n\n  for (var i = 0; i < webLog.length; i++) {\n    var start = webLog[i].start;\n    var end = webLog[i].end;\n\n    if (start > time - 3600 && start < time) {\n      var timeDiff = end - start;\n      const a = {\n        'domain': webLog[i].domain,\n        'timeDiff': timeDiff\n      };\n      hba.push(a);\n    }\n  }\n\n  return hba;\n}; // This function is called to sort the objects in an array from most to least time by domain\n\n\nfunction compare(a, b) {\n  const timeA = a.time;\n  const timeB = b.time;\n  let comparison = 0;\n\n  if (timeA > timeB) {\n    comparison = -1;\n  } else if (timeA < timeB) {\n    comparison = 1;\n  }\n\n  return comparison;\n}\n\nvar getMoodData = async m => {\n  var timeByDomain = [];\n  const mood = await m;\n  const moodLog = await getMoodLog();\n  const webLog = await getWebLog();\n  var x = [];\n\n  for (var i = 0; i < moodLog.length; i++) {\n    if (moodLog[i].mood === mood) {\n      var time = moodLog[i].time; // x is the array of the web times for the hour leading up to the mood log\n\n      const y = hourBeforeArray(time, webLog);\n      x = x.concat(y);\n    }\n  }\n\n  const distinctDomains = [...new Set(x.map(x => x.domain))];\n\n  for (var j = 0; j < distinctDomains.length; j++) {\n    var domTime = 0;\n\n    for (var k = 0; k < x.length; k++) {\n      if (x[k].domain === distinctDomains[j]) {\n        domTime += x[k].timeDiff;\n      }\n    }\n\n    const domainTime = {\n      'domain': distinctDomains[j],\n      'time': domTime\n    };\n    timeByDomain.push(domainTime);\n  }\n\n  const sortedTimeByDomain = timeByDomain.sort(compare);\n  var topFive = [];\n\n  for (var l = 0; l < 5; l++) {\n    if (sortedTimeByDomain[l] != null) {\n      var twoEDomain = sortedTimeByDomain[l].domain;\n      var fixedDomain = twoEDomain.replaceAll('%2E', '.');\n      topFive[l] = {\n        name: fixedDomain,\n        seconds: sortedTimeByDomain[l].time\n      };\n    }\n  }\n\n  if (topFive === undefined || topFive.length === 0) {\n    topFive = [{\n      name: `You have not logged ${mood} today`,\n      seconds: 0\n    }];\n  }\n\n  return topFive;\n};\n\nexport { getMoodData };","map":{"version":3,"sources":["/Users/stanleyjia/Documents/Eudaimonia/Eudaimonia (dashboard)/app/src/Data/WebsiteByMood.js"],"names":["React","Component","getMoodLog","getWebLog","hourBeforeArray","time","webLog","hba","i","length","start","end","timeDiff","a","domain","push","compare","b","timeA","timeB","comparison","getMoodData","m","timeByDomain","mood","moodLog","x","y","concat","distinctDomains","Set","map","j","domTime","k","domainTime","sortedTimeByDomain","sort","topFive","l","twoEDomain","fixedDomain","replaceAll","name","seconds","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport getMoodLog from './MoodData.js';\nimport getWebLog from './WebData.js';\n\n// hourBeforeArray creates an array with all of\n// the logged web visirs that a start time within one\n// hour before the time of the specified mood log\nconst hourBeforeArray = (time, webLog) => {\n  var hba = [];\n  for (var i = 0; i < webLog.length; i++) {\n    var start = webLog[i].start;\n    var end = webLog[i].end;\n    if (start > (time - 3600) && start < time) {\n      var timeDiff = end - start;\n      const a = {\n        'domain': webLog[i].domain,\n        'timeDiff': timeDiff\n      }\n      hba.push(a);\n    }\n  }\n  return (hba);\n};\n// This function is called to sort the objects in an array from most to least time by domain\nfunction compare(a, b) {\n  const timeA = a.time;\n  const timeB = b.time;\n\n  let comparison = 0;\n  if (timeA > timeB) {\n    comparison = -1;\n  }\n  else if (timeA < timeB) {\n    comparison = 1;\n  }\n  return comparison;\n}\n\n\nvar getMoodData = async (m) => {\n  var timeByDomain = [];\n  const mood = await m;\n  const moodLog = await getMoodLog();\n  const webLog = await getWebLog();\n  var x = []\n  for (var i = 0; i < moodLog.length; i++) {\n    if (moodLog[i].mood === mood) {\n      var time = moodLog[i].time;\n      // x is the array of the web times for the hour leading up to the mood log\n      const y = hourBeforeArray(time, webLog);\n      x = x.concat(y)\n    }\n  }\n  const distinctDomains = [...new Set(x.map(x => x.domain))];\n  for (var j = 0; j < distinctDomains.length; j++) {\n    var domTime = 0;\n    for (var k = 0; k < x.length; k++) {\n      if (x[k].domain === distinctDomains[j]) {\n        domTime += x[k].timeDiff;\n      }\n    }\n    const domainTime = {\n      'domain': distinctDomains[j],\n      'time': domTime\n    }\n    timeByDomain.push(domainTime);\n  }\n  const sortedTimeByDomain = timeByDomain.sort(compare);\n  var topFive = [];\n  for (var l = 0; l < 5; l++) {\n    if (sortedTimeByDomain[l] != null) {\n      var twoEDomain = sortedTimeByDomain[l].domain;\n      var fixedDomain = twoEDomain.replaceAll('%2E', '.')\n      topFive[l] = { name: fixedDomain, seconds: sortedTimeByDomain[l].time }\n    }\n  }\n  if (topFive === undefined || topFive.length === 0) {\n    topFive = [{ name: `You have not logged ${mood} today`, seconds: 0 }];\n  }\n  return (topFive);\n};\n\nexport { getMoodData }\n"]},"metadata":{},"sourceType":"module"}