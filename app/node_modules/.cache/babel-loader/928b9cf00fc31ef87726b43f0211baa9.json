{"ast":null,"code":"import React, { Component } from 'react';\nimport getMoodLog from './MoodData.js';\nimport { webLog } from './WebData.js';\n\nconst hourBeforeArray = time => {\n  var hba = [];\n\n  for (var i = 0; i < webLog.length; i++) {\n    var start = webLog[i].start;\n    var end = webLog[i].end; //console.log(start);\n\n    if (start > time - 3600 && start < time) {\n      var timeDiff = end - start;\n      const a = {\n        'domain': webLog[i].domain,\n        'timeDiff': timeDiff\n      };\n      hba.push(a);\n    }\n  }\n\n  return hba;\n};\n\nfunction compare(a, b) {\n  const timeA = a.time;\n  const timeB = b.time;\n  let comparison = 0;\n\n  if (timeA > timeB) {\n    comparison = -1;\n  } else if (timeA < timeB) {\n    comparison = 1;\n  }\n\n  return comparison;\n}\n\nvar getAnxious = async () => {\n  var timeByDomain = [];\n  const moodLog = await getMoodLog();\n\n  for (var i = 0; i < moodLog.length; i++) {\n    if (moodLog[i].mood === 'Anxious') {\n      var time = moodLog[i].time; // add conditional loop for if time < 3600\n      // x is the array of the web times for the hour leading up to the mood log\n\n      const x = hourBeforeArray(time);\n      const distinctDomains = [...new Set(x.map(x => x.domain))];\n\n      for (var j = 0; j < distinctDomains.length; j++) {\n        var domTime = 0;\n\n        for (var k = 0; k < x.length; k++) {\n          if (x[k].domain === distinctDomains[j]) {\n            domTime += x[k].timeDiff;\n          }\n        }\n\n        const domainTime = {\n          'domain': distinctDomains[j],\n          'time': domTime\n        };\n        timeByDomain.push(domainTime);\n      }\n    }\n  }\n\n  const topFive = timeByDomain.sort(compare);\n  console.log(topFive);\n  var anxiousData = [];\n\n  if (topFive === undefined || topFive.length == 0) {\n    anxiousData = [{\n      name: 'none',\n      seconds: 0\n    }];\n  } else {\n    anxiousData = [{\n      name: topFive[0].domain,\n      seconds: topFive[0].time\n    }, {\n      name: topFive[1].domain,\n      seconds: topFive[1].time\n    }, {\n      name: topFive[2].domain,\n      seconds: topFive[2].time\n    }, {\n      name: topFive[3].domain,\n      seconds: topFive[3].time\n    }, {\n      name: topFive[4].domain,\n      seconds: topFive[4].time\n    }];\n  }\n\n  console.log(anxiousData);\n  return anxiousData;\n};\n\nvar getConfident = async () => {\n  var timeByDomain = [];\n  const moodLog = await getMoodLog();\n\n  for (var i = 0; i < moodLog.length; i++) {\n    if (moodLog[i].mood === 'Confident') {\n      var time = moodLog[i].time; // add conditional loop for if time < 3600\n      // x is the array of the web times for the hour leading up to the mood log\n\n      const x = hourBeforeArray(time);\n      const distinctDomains = [...new Set(x.map(x => x.domain))];\n\n      for (var j = 0; j < distinctDomains.length; j++) {\n        var domTime = 0;\n\n        for (var k = 0; k < x.length; k++) {\n          if (x[k].domain === distinctDomains[j]) {\n            domTime += x[k].timeDiff;\n          }\n        }\n\n        const domainTime = {\n          'domain': distinctDomains[j],\n          'time': domTime\n        };\n        timeByDomain.push(domainTime);\n      }\n    }\n  }\n\n  const topFive = timeByDomain.sort(compare);\n  console.log(topFive);\n  var confidentData = [];\n\n  if (topFive === undefined || topFive.length == 0) {\n    confidentData = [{\n      name: 'none',\n      seconds: 0\n    }];\n  } else {\n    confidentData = [{\n      name: topFive[0].domain,\n      seconds: topFive[0].time\n    }, {\n      name: topFive[1].domain,\n      seconds: topFive[1].time\n    }, {\n      name: topFive[2].domain,\n      seconds: topFive[2].time\n    }, {\n      name: topFive[3].domain,\n      seconds: topFive[3].time\n    }, {\n      name: topFive[4].domain,\n      seconds: topFive[4].time\n    }];\n  }\n\n  console.log(confidentData);\n  return confidentData;\n};\n\nvar getSad = async () => {\n  var timeByDomain = [];\n  const moodLog = await getMoodLog();\n\n  for (var i = 0; i < moodLog.length; i++) {\n    if (moodLog[i].mood === 'Sad') {\n      var time = moodLog[i].time; // add conditional loop for if time < 3600\n      // x is the array of the web times for the hour leading up to the mood log\n\n      const x = hourBeforeArray(time);\n      const distinctDomains = [...new Set(x.map(x => x.domain))];\n\n      for (var j = 0; j < distinctDomains.length; j++) {\n        var domTime = 0;\n\n        for (var k = 0; k < x.length; k++) {\n          if (x[k].domain === distinctDomains[j]) {\n            domTime += x[k].timeDiff;\n          }\n        }\n\n        const domainTime = {\n          'domain': distinctDomains[j],\n          'time': domTime\n        };\n        timeByDomain.push(domainTime);\n      }\n    }\n  }\n\n  const topFive = timeByDomain.sort(compare);\n  console.log(topFive);\n  var sadData = [];\n\n  if (topFive === undefined || topFive.length == 0) {\n    sadData = [{\n      name: 'none',\n      seconds: 0\n    }];\n  } else {\n    sadData = [{\n      name: topFive[0].domain,\n      seconds: topFive[0].time\n    }, {\n      name: topFive[1].domain,\n      seconds: topFive[1].time\n    }, {\n      name: topFive[2].domain,\n      seconds: topFive[2].time\n    }, {\n      name: topFive[3].domain,\n      seconds: topFive[3].time\n    }, {\n      name: topFive[4].domain,\n      seconds: topFive[4].time\n    }];\n  }\n\n  console.log(sadData);\n  return sadData;\n};\n\nvar getHappy = async () => {\n  var timeByDomain = [];\n  const moodLog = await getMoodLog();\n\n  for (var i = 0; i < moodLog.length; i++) {\n    if (moodLog[i].mood === 'Happy') {\n      var time = moodLog[i].time; // add conditional loop for if time < 3600\n      // x is the array of the web times for the hour leading up to the mood log\n\n      const x = hourBeforeArray(time);\n      const distinctDomains = [...new Set(x.map(x => x.domain))];\n\n      for (var j = 0; j < distinctDomains.length; j++) {\n        var domTime = 0;\n\n        for (var k = 0; k < x.length; k++) {\n          if (x[k].domain === distinctDomains[j]) {\n            domTime += x[k].timeDiff;\n          }\n        }\n\n        const domainTime = {\n          'domain': distinctDomains[j],\n          'time': domTime\n        };\n        timeByDomain.push(domainTime);\n      }\n    }\n  }\n\n  const topFive = timeByDomain.sort(compare);\n  console.log(topFive);\n  var happyData = [];\n\n  if (topFive === undefined || topFive.length == 0) {\n    happyData = [{\n      name: 'none',\n      seconds: 0\n    }];\n  } else {\n    happyData = [{\n      name: topFive[0].domain,\n      seconds: topFive[0].time\n    }, {\n      name: topFive[1].domain,\n      seconds: topFive[1].time\n    }, {\n      name: topFive[2].domain,\n      seconds: topFive[2].time\n    }, {\n      name: topFive[3].domain,\n      seconds: topFive[3].time\n    }, {\n      name: topFive[4].domain,\n      seconds: topFive[4].time\n    }];\n  }\n\n  console.log(happyData);\n  return happyData;\n}; // function anxiousRetrieved(moodLog) {\n//   // var timeByDomain = [];\n//   // console.log(typeof (moodLog));\n//   // console.log(`here ${moodLog}`);\n//   // console.log(moodLog.keys());\n//   console.log(moodLog);\n//   // console.log(Object.entries(moodLog));\n//   for (var key in moodLog) {\n//     console.log(moodLog[key]);\n//     //     console.log(moodLog[key]);\n//     //     if (moodLog[key].mood === 'Anxious'){\n//     //         var time = moodLog[key].time;\n//     //         // add conditional loop for if time < 3600\n//     //         // x is the array of the web times for the hour leading up to the mood log\n//     //         const x  = hourBeforeArray(time)\n//     //         console.log(x);\n//     //         const distinctDomains = [...new Set(x.map(x => x.domain))];\n//     //         console.log(distinctDomains);\n//     //         for (var j = 0; j < distinctDomains.length; j++){\n//     //             var domTime = 0;\n//     //             for (var k = 0; k < x.length; k++){\n//     //                 if (x[k].domain === distinctDomains[j]){\n//     //                     console.log('works!!!')\n//     //                     domTime += x[k].timeDiff;\n//     //                 }\n//     //             }\n//     //             const domainTime = {\n//     //                 'domain' : distinctDomains[j],\n//     //                 'time' : domTime\n//     //             }\n//     //             timeByDomain.push(domainTime);\n//     //         }\n//     //     }\n//     // }\n//     // const topFive = timeByDomain.sort(compare);\n//     // console.log(timeByDomain);\n//     // const anxiousData = [\n//     //     {name: topFive[0].domain, seconds: topFive[0].time},\n//     //     {name: topFive[1].domain, seconds: topFive[1].time},\n//     //     {name: topFive[2].domain, seconds: topFive[2].time},\n//     //     {name: topFive[3].domain, seconds: topFive[3].time},\n//     //     {name: topFive[4].domain, seconds: topFive[4].time},\n//     // ]\n//     //return(anxiousData);\n//   }\n//   return ([]);\n// }\n//ending here\n// const anxiousData = [\n//     {name: timeByDomain[0].domain, seconds: timeByDomain[0].time},\n//     {name: timeByDomain[1].domain, seconds: timeByDomain[1].time},\n//     {name: timeByDomain[2].domain, seconds: timeByDomain[2].time},\n//     {name: timeByDomain[3].domain, seconds: timeByDomain[3].time},\n//     {name: timeByDomain[4].domain, seconds: timeByDomain[4].time},\n// ]\n// };\n//export default tim;\n// // console.log(timeByDomain);\n\n\nexport { getAnxious, getConfident, getSad, getHappy }; // export const timeByDom = getAnxious();","map":{"version":3,"sources":["/Users/stanleyjia/Documents/Eudaimonia/firebase-auth/auth-app/src/Components/WebsiteByMood.js"],"names":["React","Component","getMoodLog","webLog","hourBeforeArray","time","hba","i","length","start","end","timeDiff","a","domain","push","compare","b","timeA","timeB","comparison","getAnxious","timeByDomain","moodLog","mood","x","distinctDomains","Set","map","j","domTime","k","domainTime","topFive","sort","console","log","anxiousData","undefined","name","seconds","getConfident","confidentData","getSad","sadData","getHappy","happyData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport getMoodLog from './MoodData.js';\nimport { webLog } from './WebData.js';\n\nconst hourBeforeArray = (time) => {\n  var hba = [];\n  for (var i = 0; i < webLog.length; i++) {\n    var start = webLog[i].start;\n    var end = webLog[i].end;\n    //console.log(start);\n    if (start > (time - 3600) && start < time) {\n      var timeDiff = end - start;\n      const a = {\n        'domain': webLog[i].domain,\n        'timeDiff': timeDiff\n      }\n      hba.push(a);\n    }\n  }\n  return (hba);\n};\nfunction compare(a, b) {\n  const timeA = a.time;\n  const timeB = b.time;\n\n  let comparison = 0;\n  if (timeA > timeB) {\n    comparison = -1;\n  }\n  else if (timeA < timeB) {\n    comparison = 1;\n  }\n  return comparison;\n}\n\nvar getAnxious = async () => {\n    var timeByDomain = [];\n    const moodLog = await getMoodLog();\n    for (var i = 0; i < moodLog.length; i++){\n        if (moodLog[i].mood === 'Anxious'){\n            var time = moodLog[i].time;\n            // add conditional loop for if time < 3600\n            // x is the array of the web times for the hour leading up to the mood log\n            const x  = hourBeforeArray(time)\n            const distinctDomains = [...new Set(x.map(x => x.domain))];\n            for (var j = 0; j < distinctDomains.length; j++){\n                var domTime = 0;\n                for (var k = 0; k < x.length; k++){\n                    if (x[k].domain === distinctDomains[j]){\n                        domTime += x[k].timeDiff;\n                    }\n                }\n                const domainTime = {\n                    'domain' : distinctDomains[j],\n                    'time' : domTime\n                }\n                timeByDomain.push(domainTime);\n            }\n        }\n    }\n    const topFive = timeByDomain.sort(compare);\n    console.log(topFive);\n    var anxiousData = [];\n    if (topFive === undefined || topFive.length == 0){\n        anxiousData = [\n            {name: 'none', seconds: 0}\n        ];\n    }\n    else{\n        anxiousData = [\n            {name: topFive[0].domain, seconds: topFive[0].time},\n            {name: topFive[1].domain, seconds: topFive[1].time},\n            {name: topFive[2].domain, seconds: topFive[2].time},\n            {name: topFive[3].domain, seconds: topFive[3].time},\n            {name: topFive[4].domain, seconds: topFive[4].time},        \n        ]\n    }\n    console.log(anxiousData);\n    return(anxiousData);\n};\nvar getConfident = async () => {\n    var timeByDomain = [];\n    const moodLog = await getMoodLog();\n    for (var i = 0; i < moodLog.length; i++){\n        if (moodLog[i].mood === 'Confident'){\n            var time = moodLog[i].time;\n            // add conditional loop for if time < 3600\n            // x is the array of the web times for the hour leading up to the mood log\n            const x  = hourBeforeArray(time)\n            const distinctDomains = [...new Set(x.map(x => x.domain))];\n            for (var j = 0; j < distinctDomains.length; j++){\n                var domTime = 0;\n                for (var k = 0; k < x.length; k++){\n                    if (x[k].domain === distinctDomains[j]){\n                        domTime += x[k].timeDiff;\n                    }\n                }\n                const domainTime = {\n                    'domain' : distinctDomains[j],\n                    'time' : domTime\n                }\n                timeByDomain.push(domainTime);\n            }\n        }\n    }\n    const topFive = timeByDomain.sort(compare);\n    console.log(topFive);\n    var confidentData = [];\n    if (topFive === undefined || topFive.length == 0){\n        confidentData = [\n            {name: 'none', seconds: 0}\n        ];\n    }\n    else{\n        confidentData = [\n            {name: topFive[0].domain, seconds: topFive[0].time},\n            {name: topFive[1].domain, seconds: topFive[1].time},\n            {name: topFive[2].domain, seconds: topFive[2].time},\n            {name: topFive[3].domain, seconds: topFive[3].time},\n            {name: topFive[4].domain, seconds: topFive[4].time},        \n        ]\n    }\n    console.log(confidentData);\n    return(confidentData);\n};\nvar getSad = async () => {\n    var timeByDomain = [];\n    const moodLog = await getMoodLog();\n    for (var i = 0; i < moodLog.length; i++){\n        if (moodLog[i].mood === 'Sad'){\n            var time = moodLog[i].time;\n            // add conditional loop for if time < 3600\n            // x is the array of the web times for the hour leading up to the mood log\n            const x  = hourBeforeArray(time)\n            const distinctDomains = [...new Set(x.map(x => x.domain))];\n            for (var j = 0; j < distinctDomains.length; j++){\n                var domTime = 0;\n                for (var k = 0; k < x.length; k++){\n                    if (x[k].domain === distinctDomains[j]){\n                        domTime += x[k].timeDiff;\n                    }\n                }\n                const domainTime = {\n                    'domain' : distinctDomains[j],\n                    'time' : domTime\n                }\n                timeByDomain.push(domainTime);\n            }\n        }\n    }\n    const topFive = timeByDomain.sort(compare);\n    console.log(topFive);\n    var sadData = [];\n    if (topFive === undefined || topFive.length == 0){\n        sadData = [\n            {name: 'none', seconds: 0}\n        ];\n    }\n    else{\n        sadData = [\n            {name: topFive[0].domain, seconds: topFive[0].time},\n            {name: topFive[1].domain, seconds: topFive[1].time},\n            {name: topFive[2].domain, seconds: topFive[2].time},\n            {name: topFive[3].domain, seconds: topFive[3].time},\n            {name: topFive[4].domain, seconds: topFive[4].time},        \n        ]\n    }\n    console.log(sadData);\n    return(sadData);\n};\nvar getHappy = async () => {\n    var timeByDomain = [];\n    const moodLog = await getMoodLog();\n    for (var i = 0; i < moodLog.length; i++){\n        if (moodLog[i].mood === 'Happy'){\n            var time = moodLog[i].time;\n            // add conditional loop for if time < 3600\n            // x is the array of the web times for the hour leading up to the mood log\n            const x  = hourBeforeArray(time)\n            const distinctDomains = [...new Set(x.map(x => x.domain))];\n            for (var j = 0; j < distinctDomains.length; j++){\n                var domTime = 0;\n                for (var k = 0; k < x.length; k++){\n                    if (x[k].domain === distinctDomains[j]){\n                        domTime += x[k].timeDiff;\n                    }\n                }\n                const domainTime = {\n                    'domain' : distinctDomains[j],\n                    'time' : domTime\n                }\n                timeByDomain.push(domainTime);\n            }\n        }\n    }\n    const topFive = timeByDomain.sort(compare);\n    console.log(topFive);\n    var happyData = [];\n    if (topFive === undefined || topFive.length == 0){\n        happyData = [\n            {name: 'none', seconds: 0}\n        ];\n    }\n    else{\n        happyData = [\n            {name: topFive[0].domain, seconds: topFive[0].time},\n            {name: topFive[1].domain, seconds: topFive[1].time},\n            {name: topFive[2].domain, seconds: topFive[2].time},\n            {name: topFive[3].domain, seconds: topFive[3].time},\n            {name: topFive[4].domain, seconds: topFive[4].time},        \n        ]\n    }\n    console.log(happyData);\n    return(happyData);\n};\n\n// function anxiousRetrieved(moodLog) {\n//   // var timeByDomain = [];\n//   // console.log(typeof (moodLog));\n//   // console.log(`here ${moodLog}`);\n//   // console.log(moodLog.keys());\n\n//   console.log(moodLog);\n//   // console.log(Object.entries(moodLog));\n//   for (var key in moodLog) {\n//     console.log(moodLog[key]);\n//     //     console.log(moodLog[key]);\n//     //     if (moodLog[key].mood === 'Anxious'){\n//     //         var time = moodLog[key].time;\n//     //         // add conditional loop for if time < 3600\n//     //         // x is the array of the web times for the hour leading up to the mood log\n//     //         const x  = hourBeforeArray(time)\n//     //         console.log(x);\n//     //         const distinctDomains = [...new Set(x.map(x => x.domain))];\n//     //         console.log(distinctDomains);\n//     //         for (var j = 0; j < distinctDomains.length; j++){\n//     //             var domTime = 0;\n//     //             for (var k = 0; k < x.length; k++){\n//     //                 if (x[k].domain === distinctDomains[j]){\n//     //                     console.log('works!!!')\n//     //                     domTime += x[k].timeDiff;\n//     //                 }\n//     //             }\n//     //             const domainTime = {\n//     //                 'domain' : distinctDomains[j],\n//     //                 'time' : domTime\n//     //             }\n//     //             timeByDomain.push(domainTime);\n//     //         }\n//     //     }\n//     // }\n//     // const topFive = timeByDomain.sort(compare);\n//     // console.log(timeByDomain);\n//     // const anxiousData = [\n//     //     {name: topFive[0].domain, seconds: topFive[0].time},\n//     //     {name: topFive[1].domain, seconds: topFive[1].time},\n//     //     {name: topFive[2].domain, seconds: topFive[2].time},\n//     //     {name: topFive[3].domain, seconds: topFive[3].time},\n//     //     {name: topFive[4].domain, seconds: topFive[4].time},\n//     // ]\n//     //return(anxiousData);\n//   }\n//   return ([]);\n// }\n\n\n\n//ending here\n// const anxiousData = [\n//     {name: timeByDomain[0].domain, seconds: timeByDomain[0].time},\n//     {name: timeByDomain[1].domain, seconds: timeByDomain[1].time},\n//     {name: timeByDomain[2].domain, seconds: timeByDomain[2].time},\n//     {name: timeByDomain[3].domain, seconds: timeByDomain[3].time},\n//     {name: timeByDomain[4].domain, seconds: timeByDomain[4].time},\n// ]\n// };\n//export default tim;\n\n// // console.log(timeByDomain);\nexport {getAnxious, getConfident, getSad, getHappy}\n// export const timeByDom = getAnxious();\n"]},"metadata":{},"sourceType":"module"}